// Schema for a fictional music streaming service
// This service contains songs, albums, artists & playlists, and tracks user interactions with each of them
// https://github.com/prisma/templates/blob/main/musicStreamingService/prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  email        String        @unique
  interactions Interaction[]
  playlists    Playlist[]
}

model Interaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    String?
  userId    String?
  isLiked   Boolean  @default(false)
  playCount Int
  song      Song?    @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Song {
  id           String        @id @default(uuid())
  interactions Interaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  album        Album?        @relation(fields: [albumId], references: [id])
  albumId      String?
  artist       Artist        @relation(fields: [artistId], references: [id])
  artistId     String
  length       Float
  track        Int?
  lyrics       String?
  playlist     Playlist[]
  fileUrl      String
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  albums    Album[]
  songs     Song[]
}

model Album {
  id        String   @id @default(uuid())
  songs     Song[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artists   Artist[]
  name      String
  cover     String
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  songs     Song[]
  name      String
}

}
